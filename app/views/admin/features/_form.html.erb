<%= form_for [:admin, @feature] do |f| -%>
  <%= render :partial => "/shared/admin/error_messages", :locals => {
    :object => @feature,
    :include_object_name => true
  } %>

  <div class='field'>
    <%= f.label :title -%>
    <%= f.text_field :title, :class => 'larger widest' -%>
  </div>

  <div class='field'>
    <%= f.label :description -%>
    <%= f.text_area :description, :rows => 20, :class => 'wymeditor widest' -%>
  </div>

  <div class='field'>
    <%= f.label :gallery_id -%>
    <%= render :partial => "gallery_picker", :locals => {
      :f => f,
      :field => :gallery_id,
      :gallery => @feature.gallery
    } %>
  </div>

  <% Feature.dynamic_attributes.each do |att, type| %>
  <div class="field">
    <%= f.label att.to_sym %>
    <% if type == 'text' %>
    <%= f.text_area att.to_sym, :rows => 20, :class => 'larger widest' -%>
    <% else %>
    <%= f.text_field att.to_sym, :class => 'larger widest' -%>
    <% end -%>
  </div>
  <% end %>

  <div class="field">
    <%= f.label :the_geom %>
    <%= f.hidden_field :the_geom, :value => @feature.the_geom? ? @feature.the_geom_to_wkt : nil -%>

    <div id="map" class="smallmap" style="height:400px;"></div>

    <% if Feature.feature_geom_type == :point %>

<script type="text/javascript">
$(document).ready(function() {
  OpenLayers.Util.onImageLoadErrorColor = 'transparent';

  var projection = new OpenLayers.Projection("EPSG:900913");
  var destProjection = new OpenLayers.Projection("EPSG:4326");

  var options = {
    projection: projection,
    units: "meters",
    numZoomLevels:4
  };

  var map = new OpenLayers.Map('map', options);
  var gphy = new OpenLayers.Layer.Google(
      "Google Physical",
      {type: google.maps.MapTypeId.TERRAIN, numZoomLevels: 18}
  );

  var layer = new OpenLayers.Layer.Vector();

  var panelControlsEdit = [
   new OpenLayers.Control.Navigation(),
   new OpenLayers.Control.ModifyFeature(layer, {
     mode: OpenLayers.Control.ModifyFeature.DRAG
   })
  ];

  <% unless @feature.the_geom %>
  var panelControls = [
   new OpenLayers.Control.Navigation(),
   new OpenLayers.Control.DrawFeature(layer,
       OpenLayers.Handler.Point,
       {'displayClass': 'olControlDrawFeaturePoint'}),
   new OpenLayers.Control.ModifyFeature(layer, {
     mode: OpenLayers.Control.ModifyFeature.DRAG
   })
  ];

  var toolbar = new OpenLayers.Control.Panel({
     displayClass: 'olControlEditingToolbar',
     defaultControl: panelControls[0]
  });
  toolbar.addControls(panelControls);

  <% else %>
  var toolbar = new OpenLayers.Control.Panel({
     displayClass: 'olControlEditingToolbar',
     defaultControl: panelControlsEdit[1]
  });
  toolbar.addControls(panelControlsEdit);

  var wkt = new OpenLayers.Format.WKT()
  var features = wkt.read('<%= @feature.the_geom_to_wkt %>');
  features.geometry.transform(destProjection, projection);
  layer.addFeatures(features);
  <% end -%>

  map.addControl(toolbar);

  layer.events.on({
    "featureadded": function(evt){
      var new_geometry = evt.feature.geometry.clone();
      $('#feature_the_geom').val(new_geometry.transform(projection, destProjection));
      toolbar.destroy();
      toolbar = new OpenLayers.Control.Panel({
         displayClass: 'olControlEditingToolbar',
         defaultControl: panelControlsEdit[1]
      });
      toolbar.addControls(panelControlsEdit);
      map.addControl(toolbar);
    },
    "featuremodified": function(evt){
      var new_geometry = evt.feature.geometry.clone();
      $('#feature_the_geom').val(new_geometry.transform(projection, destProjection));
    }
  });

  map.addLayers([gphy, layer]);
  <% unless @feature.the_geom %>
  map.setCenter(new OpenLayers.LonLat(-71, -20), 3);
  <% else %>
  map.setCenter(features.lonlat, 2);
  <% end -%>

});
</script>

    <% elsif Feature.feature_geom_type == :polygon %>

    <script type="text/javascript">
    $(document).ready(function() {
      OpenLayers.Util.onImageLoadErrorColor = 'transparent';

      var projection = new OpenLayers.Projection("EPSG:900913");
      var destProjection = new OpenLayers.Projection("EPSG:4326");

      var options = {
        projection: projection,
        units: "meters",
        numZoomLevels:4
      };

      var map = new OpenLayers.Map('map', options);
      var gphy = new OpenLayers.Layer.Google(
          "Google Physical",
          {type: google.maps.MapTypeId.TERRAIN, numZoomLevels: 18}
      );

      var layer = new OpenLayers.Layer.Vector();

      var panelControlsEdit = [
        new OpenLayers.Control.Navigation(),
        new OpenLayers.Control.ModifyFeature(layer, {
          mode: OpenLayers.Control.ModifyFeature.DRAG | OpenLayers.Control.ModifyFeature.RESHAPE
        })
      ];

      <% unless @feature.the_geom %>
      var panelControls = [
        new OpenLayers.Control.Navigation(),
        new OpenLayers.Control.DrawFeature(layer,
            OpenLayers.Handler.Polygon,
            {'displayClass': 'olControlDrawFeaturePoint'}),
        new OpenLayers.Control.ModifyFeature(layer, {
            mode: OpenLayers.Control.ModifyFeature.DRAG | OpenLayers.Control.ModifyFeature.RESHAPE
       })
      ];

      var toolbar = new OpenLayers.Control.Panel({
         displayClass: 'olControlEditingToolbar',
         defaultControl: panelControls[0]
      });
      toolbar.addControls(panelControls);
      <% else %>
      var toolbar = new OpenLayers.Control.Panel({
         displayClass: 'olControlEditingToolbar',
         defaultControl: panelControlsEdit[1]
      });
      toolbar.addControls(panelControlsEdit);

      var wkt = new OpenLayers.Format.WKT()
      var features = wkt.read('<%= @feature.the_geom_to_wkt %>');
      features.geometry.transform(destProjection, projection);
      layer.addFeatures(features);
      <% end -%>

      map.addControl(toolbar);


      layer.events.on({
        "featureadded": function(evt){
          var new_geometry = evt.feature.geometry.clone();
          $('#feature_the_geom').val(new_geometry.transform(projection, destProjection));
          toolbar.destroy();
          toolbar = new OpenLayers.Control.Panel({
             displayClass: 'olControlEditingToolbar',
             defaultControl: panelControlsEdit[1]
          });
          toolbar.addControls(panelControlsEdit);
          map.addControl(toolbar);
        },
        "featuremodified": function(evt){
          var new_geometry = evt.feature.geometry.clone();
          $('#feature_the_geom').val(new_geometry.transform(projection, destProjection));
        }
      });

      map.addLayers([gphy, layer]);
      <% unless @feature.the_geom %>
      map.setCenter(new OpenLayers.LonLat(-71, -20), 3);
      <% else %>
      map.setCenter(features.lonlat, 2);
      <% end -%>
    });

    </script>

    <% else %>

    TODO: UI for managing anything else

    <% end -%>

  </div>

  <%= render :partial => "/shared/admin/form_actions",
              :locals => {
                :f => f,
                :continue_editing => false,
                :delete_title => t('admin.features.feature.delete'),
                :delete_confirmation => t('shared.admin.delete.message', :title => @feature.title)
              } %>

<% end -%>